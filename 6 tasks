#1. Реалізуйте функцію, параметрами якої є два числа та рядок.
Повертає вона конкатенацію рядка із сумою чисел.

def concaten_elem (x, y, z):
    summa = str (x + y) + z
    return summa


a = int (input('Input your first number: '))
b = int (input('Input your second number: '))
c = input('Input your word: ')
print(concaten_elem(a, b, c))


#2. Реалізуйте функцію, яка малює на екрані прямокутник із зірочок «*».
Її параметрами будуть цілі числа, які описують довжину та ширину такого прямокутника.

def get_rectangle (a, b):
    res = f"{'*' * b}\n" + f"* {' ' * (b - 2)}*\n" *(a - 2) + f"{'*' * b}\n"
    #return res


a = int (input('Input side one: '))
b = int (input('Input side two: '))

print(get_rectangle(a, b))

#3. Напишіть функцію, яка реалізує лінійний пошук елемента у списку цілих чисел.
Якщо такий елемент у списку є, то поверніть індекс, якщо ні, то поверніть число «-1».

def search_elem(list_1, element):
    for i in range(len(list_1)):
        if(list_1[i] == element):
            return i
    return -1

a = list (map(int, input('Input any number of integers: ').split()))
b = int (input('Input searching number: '))

print(search_elem(a, b))


#4. Напишіть функцію, яка поверне кількість слів у текстовому рядку.

def lenth_text(text):
    text = len(text.split())
    return text

a = input('Input your text: ')

print(lenth_text(a))


#5. Напишіть функцію, яка переводить число, що означає кількість доларів і центів, в прописний формат.
Наприклад:  "", "",
> 123,34
> one hundred twenty three dollars thirty four cents


#дуже корявий варіант. я змогла зробити, щоб кожна частина числа писалась прописом, але все разом зібрати не можу. 
Відправляю поки такий варіант, а на вихідних спробую доробити код.

def convert_number_1(number):
    ones = ("", "one ", "two ", "three ", "four ", "five ", "six ", "seven ", "eight ", "nine ", \
            "ten ", "eleven ", "twelve ", "thirteen ", "fourteen ", "fifteen ",
            "sixteen ", "seventeen ", "eighteen ", "nineteen ")
    tens =("", "", "twenty ", "thirty ", "forty ", "fifty ", "sixty ", "seventy ", "eighty ", "ninety ")

    if number < 0:
        return "Error"

    if number < 20:
        return ones[number]

    if number < 100:
        return tens[number // 10] + ones[int(number % 10)]

    if number < 1000:
        return ones[number // 100] + "hundred " + convert_number_1(int(number % 100))

    if number < 1_000_000:
        return  convert_number_1(number // 1000) + "thousand " + convert_number_1(int(number % 1000))


print(convert_number_1(123) + 'dollars', end=' ')

def convert_number_2(num):
    number_float = int(num[-2:])
    ones = ("", "one ", "two ", "three ", "four ", "five ", "six ", "seven ", "eight ", "nine ", \
            "ten ", "eleven ", "twelve ", "thirteen ", "fourteen ", "fifteen ",
            "sixteen ", "seventeen ", "eighteen ", "nineteen ")
    tens =("", "", "twenty ", "thirty ", "forty ", "fifty ", "sixty ", "seventy ", "eighty ", "ninety ")

    if number_float == 00:
        return "zero"

    if number_float < 20:
        return ones[number_float]

    if number_float < 100:
        return tens[number_float // 10] + ones[int(number_float % 10)]

print(convert_number_2('123.34') + 'cents')

#6. Напишіть функцію, яка переводить ціле число з римського запису до десяткового.
Наприклад: XXII -> 22
Докладніше: https://en.wikipedia.org/wiki/Roman_numerals

def from_roman_numeral(numeral):
    numeral_map = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}
    res = 0                 
    last_digit = 0     

    for roman_digit in numeral[::-1]:  
        value = numeral_map[roman_digit] 

        if value >= last_digit: 
            res += value            
            last_digit = value   
        else:
            res -= value             

    return res

print(from_roman_numeral("DCC"))
